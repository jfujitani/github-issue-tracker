//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CreateIssueDto defines model for CreateIssueDto.
type CreateIssueDto struct {
	Url *string `json:"url,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// IssueDto defines model for IssueDto.
type IssueDto struct {
	Id     *string  `json:"id,omitempty"`
	Number *float32 `json:"number,omitempty"`
	Owner  *string  `json:"owner,omitempty"`
	Repo   *string  `json:"repo,omitempty"`
	Url    *string  `json:"url,omitempty"`
}

// IssueStatusDto defines model for IssueStatusDto.
type IssueStatusDto struct {
	Status *string `json:"status,omitempty"`
	Title  *string `json:"title,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// PostIssuesJSONRequestBody defines body for PostIssues for application/json ContentType.
type PostIssuesJSONRequestBody = CreateIssueDto

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all issues
	// (GET /issues)
	GetIssues(w http.ResponseWriter, r *http.Request)
	// Create a new issue
	// (POST /issues)
	PostIssues(w http.ResponseWriter, r *http.Request)
	// Get all issue statuses
	// (GET /issues/status)
	GetIssuesStatus(w http.ResponseWriter, r *http.Request)
	// Delete issue by ID
	// (DELETE /issues/{id})
	DeleteIssuesId(w http.ResponseWriter, r *http.Request, id string)
	// Get issue by ID
	// (GET /issues/{id})
	GetIssuesId(w http.ResponseWriter, r *http.Request, id string)
	// Get issue status by ID
	// (GET /issues/{id}/status)
	GetIssuesIdStatus(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetIssues operation middleware
func (siw *ServerInterfaceWrapper) GetIssues(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIssues(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostIssues operation middleware
func (siw *ServerInterfaceWrapper) PostIssues(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIssues(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIssuesStatus operation middleware
func (siw *ServerInterfaceWrapper) GetIssuesStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIssuesStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteIssuesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteIssuesId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteIssuesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIssuesId operation middleware
func (siw *ServerInterfaceWrapper) GetIssuesId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIssuesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIssuesIdStatus operation middleware
func (siw *ServerInterfaceWrapper) GetIssuesIdStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIssuesIdStatus(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/issues", wrapper.GetIssues)
	m.HandleFunc("POST "+options.BaseURL+"/issues", wrapper.PostIssues)
	m.HandleFunc("GET "+options.BaseURL+"/issues/status", wrapper.GetIssuesStatus)
	m.HandleFunc("DELETE "+options.BaseURL+"/issues/{id}", wrapper.DeleteIssuesId)
	m.HandleFunc("GET "+options.BaseURL+"/issues/{id}", wrapper.GetIssuesId)
	m.HandleFunc("GET "+options.BaseURL+"/issues/{id}/status", wrapper.GetIssuesIdStatus)

	return m
}

type BadRequestJSONResponse ErrorResponse

type InternalServerErrorJSONResponse ErrorResponse

type NotFoundJSONResponse ErrorResponse

type GetIssuesRequestObject struct {
}

type GetIssuesResponseObject interface {
	VisitGetIssuesResponse(w http.ResponseWriter) error
}

type GetIssues200JSONResponse []IssueDto

func (response GetIssues200JSONResponse) VisitGetIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIssues500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetIssues500JSONResponse) VisitGetIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostIssuesRequestObject struct {
	Body *PostIssuesJSONRequestBody
}

type PostIssuesResponseObject interface {
	VisitPostIssuesResponse(w http.ResponseWriter) error
}

type PostIssues201JSONResponse IssueDto

func (response PostIssues201JSONResponse) VisitPostIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostIssues400JSONResponse struct{ BadRequestJSONResponse }

func (response PostIssues400JSONResponse) VisitPostIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostIssues500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostIssues500JSONResponse) VisitPostIssuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesStatusRequestObject struct {
}

type GetIssuesStatusResponseObject interface {
	VisitGetIssuesStatusResponse(w http.ResponseWriter) error
}

type GetIssuesStatus200JSONResponse IssueStatusDto

func (response GetIssuesStatus200JSONResponse) VisitGetIssuesStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesStatus404JSONResponse struct{ NotFoundJSONResponse }

func (response GetIssuesStatus404JSONResponse) VisitGetIssuesStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetIssuesStatus500JSONResponse) VisitGetIssuesStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIssuesIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteIssuesIdResponseObject interface {
	VisitDeleteIssuesIdResponse(w http.ResponseWriter) error
}

type DeleteIssuesId200JSONResponse struct {
	Messaage *string `json:"messaage,omitempty"`
}

func (response DeleteIssuesId200JSONResponse) VisitDeleteIssuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIssuesId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteIssuesId404JSONResponse) VisitDeleteIssuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIssuesId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteIssuesId500JSONResponse) VisitDeleteIssuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesIdRequestObject struct {
	Id string `json:"id"`
}

type GetIssuesIdResponseObject interface {
	VisitGetIssuesIdResponse(w http.ResponseWriter) error
}

type GetIssuesId200JSONResponse IssueDto

func (response GetIssuesId200JSONResponse) VisitGetIssuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetIssuesId404JSONResponse) VisitGetIssuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetIssuesId500JSONResponse) VisitGetIssuesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesIdStatusRequestObject struct {
	Id string `json:"id"`
}

type GetIssuesIdStatusResponseObject interface {
	VisitGetIssuesIdStatusResponse(w http.ResponseWriter) error
}

type GetIssuesIdStatus200JSONResponse IssueStatusDto

func (response GetIssuesIdStatus200JSONResponse) VisitGetIssuesIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesIdStatus404JSONResponse struct{ NotFoundJSONResponse }

func (response GetIssuesIdStatus404JSONResponse) VisitGetIssuesIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIssuesIdStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetIssuesIdStatus500JSONResponse) VisitGetIssuesIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all issues
	// (GET /issues)
	GetIssues(ctx context.Context, request GetIssuesRequestObject) (GetIssuesResponseObject, error)
	// Create a new issue
	// (POST /issues)
	PostIssues(ctx context.Context, request PostIssuesRequestObject) (PostIssuesResponseObject, error)
	// Get all issue statuses
	// (GET /issues/status)
	GetIssuesStatus(ctx context.Context, request GetIssuesStatusRequestObject) (GetIssuesStatusResponseObject, error)
	// Delete issue by ID
	// (DELETE /issues/{id})
	DeleteIssuesId(ctx context.Context, request DeleteIssuesIdRequestObject) (DeleteIssuesIdResponseObject, error)
	// Get issue by ID
	// (GET /issues/{id})
	GetIssuesId(ctx context.Context, request GetIssuesIdRequestObject) (GetIssuesIdResponseObject, error)
	// Get issue status by ID
	// (GET /issues/{id}/status)
	GetIssuesIdStatus(ctx context.Context, request GetIssuesIdStatusRequestObject) (GetIssuesIdStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetIssues operation middleware
func (sh *strictHandler) GetIssues(w http.ResponseWriter, r *http.Request) {
	var request GetIssuesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIssues(ctx, request.(GetIssuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIssues")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIssuesResponseObject); ok {
		if err := validResponse.VisitGetIssuesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostIssues operation middleware
func (sh *strictHandler) PostIssues(w http.ResponseWriter, r *http.Request) {
	var request PostIssuesRequestObject

	var body PostIssuesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostIssues(ctx, request.(PostIssuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIssues")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostIssuesResponseObject); ok {
		if err := validResponse.VisitPostIssuesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIssuesStatus operation middleware
func (sh *strictHandler) GetIssuesStatus(w http.ResponseWriter, r *http.Request) {
	var request GetIssuesStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIssuesStatus(ctx, request.(GetIssuesStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIssuesStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIssuesStatusResponseObject); ok {
		if err := validResponse.VisitGetIssuesStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIssuesId operation middleware
func (sh *strictHandler) DeleteIssuesId(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteIssuesIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIssuesId(ctx, request.(DeleteIssuesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIssuesId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteIssuesIdResponseObject); ok {
		if err := validResponse.VisitDeleteIssuesIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIssuesId operation middleware
func (sh *strictHandler) GetIssuesId(w http.ResponseWriter, r *http.Request, id string) {
	var request GetIssuesIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIssuesId(ctx, request.(GetIssuesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIssuesId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIssuesIdResponseObject); ok {
		if err := validResponse.VisitGetIssuesIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIssuesIdStatus operation middleware
func (sh *strictHandler) GetIssuesIdStatus(w http.ResponseWriter, r *http.Request, id string) {
	var request GetIssuesIdStatusRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIssuesIdStatus(ctx, request.(GetIssuesIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIssuesIdStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIssuesIdStatusResponseObject); ok {
		if err := validResponse.VisitGetIssuesIdStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
